#!/usr/bin/env python3
import random
import argparse
import subprocess
import os

phrases = [
        "``Too close to call''",
        "``Youthquake''",
        "Questioning if leader will resign",
        "``\\ldots remains to be seen''",
        "``A long night''",
        "``Portillo moment''",
        "``Michael Foot''",
        "Cutting to an incoming result, but nothing happens",
        "``Fake news''",
        "``The keys to Downing Street/Number 10''",
        "Interview upstaged by joke candidate in background",
        "``A night to remember''",
        "``A deal with the DUP''",
        "Recount",
        "Pundit links weather to turnout",
        "Live footage of exterior of party leader's house",
        "Party leader loses their seat",
        "Cabinet/shadow cabinet minister loses their seat",
        "Former party leader loses their seat",
        "MP of \\textgreater 25 years standing for a major party loses their seat",
        "``Across the country''",
        "Labour makes a gain",
        "``Get on with Brexit''",
        "``Brussels will be watching''",
        "``The next 5 years''",
        "Someone insists something isn't about Brexit",
        "``Election fatigue''",
        "Reference to losing deposits",
        "Tories gain a Lib Dem seat",
        "Newcastle Upon Tyne Central is first to declare",
        "``The only poll that counts is the one at the ballot box''",
        "Someone mispronounces ``Plaid Cymru''",
        "Dominic Cummings visible on live TV",
        "Dianne Abbot is interviewed",
        "``End of austerity''",
        "``First time in X years''",
        "Snow",
        "``Borrow billions''",
        "``Let me be clear\ldots ''"
        ]

def create_table(size, table, name="bingo.tex", directory=''):
    table = table[:]
    with open(os.path.join(directory,name), 'w') as f:
        f.write(r"""\documentclass[a4paper,12pt]{article}
\usepackage{tabularx}
\title{2019 General Election bingo}
\author{Murray Colpman, Harry Jeffrey, James Peach, Dan Playle, Matt Cummins}
\setlength{\tabcolsep}{18pt}
\renewcommand{\arraystretch}{2}
\begin{document}
\maketitle
\section{Bingo!}
%s
\begin{center}
\begin{tabularx}{\linewidth}{|""" % name.split('.')[0].replace('_', '\_'))

        for i in range(size):
            f.write(r"X|")
        f.write(r"""}
\hline
""")

        for i in range(size):
            for j in range(size):
                item = random.choice(table)
                table.remove(item)
                f.write(item)
                if j + 1 != size:
                    f.write(" & ")
            f.write(r""" \\ \hline
""")
        f.write(r"""\end{tabularx}
\end{center}
\end{document}
""")
        f.close()
        create_pdf(name, directory)

def create_phrases_table(size, prefix='', directory=''):
    create_table(size, phrases, name=prefix+'.tex', directory=directory)

def create_all_tables(size, prefix='', suffix='', directory=''):
    create_phrases_table(size, prefix=prefix + '_phrases' + suffix, directory=directory)


def create_tex_files(args):
    tables = args.tables if args.tables else None
    players = args.players if args.players else None
    filename = args.filename if args.filename else ''

    phrasesSuffix = ''
    if (not tables is None) and len(tables) != 1:
        phrasesSuffix = 'phrases'
        if not players is None:
            phrasesSuffix = '_' + phrasesSuffix
    if players is None:
        if tables is None:
            create_all_tables(args.size, suffix=filename, directory=args.output)
        else:
            if 'phrases' in tables:
                create_phrases_table(args.size, prefix=phrasesSuffix + filename, directory=args.output)
    else:
        for p in players:
            if tables is None:
                create_all_tables(args.size, prefix=p+'_' + filename, directory=args.output)
            else:
                if 'phrases' in tables:
                    create_phrases_table(args.size, prefix=p + phrasesSuffix + filename, directory=args.output)

def create_pdf(texfile, directory):
    if directory == '':
        subprocess.call(["pdflatex", texfile])
    else:
        print("pdflatex", "-output-directory", directory, texfile)
        subprocess.call(["pdflatex", "-output-directory", directory, texfile])

parser = argparse.ArgumentParser()
parser.add_argument('-p', '--players', nargs='+', help='Names of the bingo players.')
parser.add_argument('-t', '--tables', choices=['phrases'], nargs='+', help='The tables to generate.')
parser.add_argument('-s', '--size', nargs='?', help='Size of the table to generate. Recommend: 3.', type=int, default=3)
parser.add_argument('-o', '--output', help='Output files to a specific directory.', default='')
parser.add_argument('-f', '--filename', help='Extra suffix for filename (to be placed after player and table name but before extension)')
args = parser.parse_args()

if __name__ == '__main__':
    create_tex_files(args)
